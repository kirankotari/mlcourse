{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "<img src=\"../../img/ods_stickers.jpg\">\n",
    "## Открытый курс по машинному обучению. Сессия № 2\n",
    "</center>\n",
    "Автор материала: программист-исследователь Mail.ru Group, старший преподаватель Факультета Компьютерных Наук ВШЭ Юрий Кашницкий. Материал распространяется на условиях лицензии [Creative Commons CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/). Можно использовать в любых целях (редактировать, поправлять и брать за основу), кроме коммерческих, но с обязательным упоминанием автора материала."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <center>Тема 2. Визуальный анализ данных\n",
    "## <center>Практическое задание. Визуальный анализ данных по пассажирам \"Титаника\". Решение"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**<a href=\"https://www.kaggle.com/c/titanic\">Соревнование</a> Kaggle \"Titanic: Machine Learning from Disaster\".**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Считываем обучающую выборку.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df = pd.read_csv(\"../../data/titanic_train.csv\", \n",
    "                       index_col='PassengerId') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x218fbcf0>"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_df.pivot_table('Pclass', 'Survived').plot(kind='bar', stacked=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>204</td>\n",
       "      <td>889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>891</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>681</td>\n",
       "      <td>NaN</td>\n",
       "      <td>147</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Saad, Mr. Amin</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>347082</td>\n",
       "      <td>NaN</td>\n",
       "      <td>G6</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>577</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.204208</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>NaN</td>\n",
       "      <td>49.693429</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.910400</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.454200</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>512.329200</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Survived      Pclass            Name   Sex         Age       SibSp  \\\n",
       "count   891.000000  891.000000             891   891  714.000000  891.000000   \n",
       "unique         NaN         NaN             891     2         NaN         NaN   \n",
       "top            NaN         NaN  Saad, Mr. Amin  male         NaN         NaN   \n",
       "freq           NaN         NaN               1   577         NaN         NaN   \n",
       "mean      0.383838    2.308642             NaN   NaN   29.699118    0.523008   \n",
       "std       0.486592    0.836071             NaN   NaN   14.526497    1.102743   \n",
       "min       0.000000    1.000000             NaN   NaN    0.420000    0.000000   \n",
       "25%       0.000000    2.000000             NaN   NaN   20.125000    0.000000   \n",
       "50%       0.000000    3.000000             NaN   NaN   28.000000    0.000000   \n",
       "75%       1.000000    3.000000             NaN   NaN   38.000000    1.000000   \n",
       "max       1.000000    3.000000             NaN   NaN   80.000000    8.000000   \n",
       "\n",
       "             Parch  Ticket        Fare Cabin Embarked  \n",
       "count   891.000000     891  891.000000   204      889  \n",
       "unique         NaN     681         NaN   147        3  \n",
       "top            NaN  347082         NaN    G6        S  \n",
       "freq           NaN       7         NaN     4      644  \n",
       "mean      0.381594     NaN   32.204208   NaN      NaN  \n",
       "std       0.806057     NaN   49.693429   NaN      NaN  \n",
       "min       0.000000     NaN    0.000000   NaN      NaN  \n",
       "25%       0.000000     NaN    7.910400   NaN      NaN  \n",
       "50%       0.000000     NaN   14.454200   NaN      NaN  \n",
       "75%       0.000000     NaN   31.000000   NaN      NaN  \n",
       "max       6.000000     NaN  512.329200   NaN      NaN  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.describe(include='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 891 entries, 1 to 891\n",
      "Data columns (total 11 columns):\n",
      "Survived    891 non-null int64\n",
      "Pclass      891 non-null int64\n",
      "Name        891 non-null object\n",
      "Sex         891 non-null object\n",
      "Age         714 non-null float64\n",
      "SibSp       891 non-null int64\n",
      "Parch       891 non-null int64\n",
      "Ticket      891 non-null object\n",
      "Fare        891 non-null float64\n",
      "Cabin       204 non-null object\n",
      "Embarked    889 non-null object\n",
      "dtypes: float64(2), int64(4), object(5)\n",
      "memory usage: 66.1+ KB\n"
     ]
    }
   ],
   "source": [
    "train_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Выкинем признак `Cabin`, а потом – все строки, где есть пропуски.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df = train_df.drop('Cabin', axis=1).dropna()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Постройте попарные зависимости признаков `Age`, `Fare`, `Pclass`, `Sex`, `SibSp`, `Parch`, `Embarked` и `Survived`. (метод `scatter_matrix ` Pandas или `pairplot` Seaborn).**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PassengerId\n",
      "1        7.2500\n",
      "2       71.2833\n",
      "3        7.9250\n",
      "4       53.1000\n",
      "5        8.0500\n",
      "7       51.8625\n",
      "8       21.0750\n",
      "9       11.1333\n",
      "10      30.0708\n",
      "11      16.7000\n",
      "12      26.5500\n",
      "13       8.0500\n",
      "14      31.2750\n",
      "15       7.8542\n",
      "16      16.0000\n",
      "17      29.1250\n",
      "19      18.0000\n",
      "21      26.0000\n",
      "22      13.0000\n",
      "23       8.0292\n",
      "24      35.5000\n",
      "25      21.0750\n",
      "26      31.3875\n",
      "28     263.0000\n",
      "31      27.7208\n",
      "34      10.5000\n",
      "35      82.1708\n",
      "36      52.0000\n",
      "38       8.0500\n",
      "39      18.0000\n",
      "         ...   \n",
      "857    164.8667\n",
      "858     26.5500\n",
      "859     19.2583\n",
      "861     14.1083\n",
      "862     11.5000\n",
      "863     25.9292\n",
      "865     13.0000\n",
      "866     13.0000\n",
      "867     13.8583\n",
      "868     50.4958\n",
      "870     11.1333\n",
      "871      7.8958\n",
      "872     52.5542\n",
      "873      5.0000\n",
      "874      9.0000\n",
      "875     24.0000\n",
      "876      7.2250\n",
      "877      9.8458\n",
      "878      7.8958\n",
      "880     83.1583\n",
      "881     26.0000\n",
      "882      7.8958\n",
      "883     10.5167\n",
      "884     10.5000\n",
      "885      7.0500\n",
      "886     29.1250\n",
      "887     13.0000\n",
      "888     30.0000\n",
      "890     30.0000\n",
      "891      7.7500\n",
      "Name: Fare, Length: 712, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "train_df['Fare'].quantile(.75) - train_df['Fare'].quantile(.25)\n",
    "print(train_df['Fare'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Как плата за билет (`Fare`) зависит от класса каюты (`Pclass`)? Постройте boxplot.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Такой boxplot получается не очень красивым из-за выбросов.** \n",
    "\n",
    "**Опционально: создайте признак `Fare_no_out` (стоимости без выбросов), в котором исключаются стоимости, отличающиеся от средней по классу более чем на 2 стандартных отклонения. Важно: надо исключать выбросы именно в зависимости от класса каюты. Иначе исключаться будут только самые большие (1 класс) и малые (3 класс) стоимости.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "train_df['Fare_no_out'] = train_df['Fare']\n",
    "fare_pclass1 = train_df[train_df['Pclass'] == 1]['Fare']\n",
    "fare_pclass2 = train_df[train_df['Pclass'] == 2]['Fare']\n",
    "fare_pclass3 = train_df[train_df['Pclass'] == 3]['Fare']\n",
    "fare_pclass1_no_out = # Ваш код здесь\n",
    "fare_pclass2_no_out = # Ваш код здесь\n",
    "fare_pclass3_no_out = # Ваш код здесь\n",
    "train_df['Fare_no_out'] = fare_pclass1_no_out.append(fare_pclass2_no_out)\\\n",
    "                                             .append(fare_pclass3_no_out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Каково соотношение погибших и выживших в зависимости от пола? Отобразите c помощью Seaborn.countplot c аргументом hue.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Ваш код здесь"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Каково соотношение погибших и выживших в зависимости от класса каюты? Отобразите c помощью Seaborn.countplot c аргументом hue.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Ваш код здесь"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Как факт выживания зависит от возраста пассажира? Проверьте (графически) предположение, что молодые чаще выживали. Пусть, условно, молодые - младше 30 лет, пожилые – старше 60 лет.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'PassengerId'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-79-f2cc13ddd854>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mtrain_df\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpivot_table\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'PassengerId'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'Pclass'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'Survived'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'count'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'bar'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstacked\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mc:\\python\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36mpivot_table\u001b[1;34m(self, values, index, columns, aggfunc, fill_value, margins, dropna, margins_name)\u001b[0m\n\u001b[0;32m   5301\u001b[0m                            \u001b[0maggfunc\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0maggfunc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfill_value\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mfill_value\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5302\u001b[0m                            \u001b[0mmargins\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmargins\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdropna\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdropna\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 5303\u001b[1;33m                            margins_name=margins_name)\n\u001b[0m\u001b[0;32m   5304\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5305\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mstack\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdropna\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\python\\lib\\site-packages\\pandas\\core\\reshape\\pivot.py\u001b[0m in \u001b[0;36mpivot_table\u001b[1;34m(data, values, index, columns, aggfunc, fill_value, margins, dropna, margins_name)\u001b[0m\n\u001b[0;32m     59\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mvalues\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     60\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 61\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     62\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     63\u001b[0m         \u001b[0mto_filter\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'PassengerId'"
     ]
    }
   ],
   "source": [
    "train_df.pivot_table('PassengerId', 'Pclass', 'Survived', 'count').plot(kind='bar', stacked=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  },
  "name": "seminar13_optional_practice_trees_titanic.ipynb"
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
